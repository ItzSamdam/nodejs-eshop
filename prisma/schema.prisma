datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Admin {
  id        String   @id @default(uuid())
  email     String   @unique
  fullname  String?
  password  String   @map("password_hash")
  username  String   @unique
  role      String   @default("ADMIN")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  firstname String
  lastname  String
  password  String     @map("password_hash")
  username  String     @unique
  address   Address[]
  orders    Order[]
  wishlist  Wishlist[]
  payments  Payment[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Products {
  id            String          @id @default(uuid())
  name          String
  description   String
  price         Float
  discount      Float
  category      Category        @relation(fields: [categoryId], references: [id])
  categoryId    String
  sku           String?
  quantity      Int
  inStock       Boolean         @default(true)
  isFeatured    Boolean         @default(false)
  orderItem     OrderItem[]
  wishlistItem  WishlistItem[]
  productImages ProductImages[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model ProductImages {
  id        String   @id @default(uuid())
  image     String
  imageId   String
  product   Products @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  image       String?
  imageId     String?
  products    Products[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Coupons {
  id          String     @id @default(uuid())
  name        String     @unique
  type        CouponType
  amount      Float?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
}
model Order {
  id             String         @id @default(uuid())
  orderNo        String         @unique
  delivery       Boolean        @default(false)
  deliveryDate   DateTime?
  deliveryType   DeliveryType   @default(NONE)
  deliveryStatus DeliveryStatus @default(NONE)
  price          Float
  discount       Float
  coupon         String?
  useCoupon      Boolean        @default(false)
  status         OrderStatus
  paymentStatus  PaymentStatus  @default(PENDING)
  orderItem      OrderItem[]
  user           User?          @relation(fields: [userId], references: [id])
  userId         String?
  payment        Payment[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  product   Products @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WishlistItem {
  id         String   @id @default(uuid())
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId String
  product    Products @relation(fields: [productId], references: [id])
  productId  String
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Wishlist {
  id           String         @id @default(uuid())
  user         User?          @relation(fields: [userId], references: [id])
  userId       String?
  wishlistItem WishlistItem[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Address {
  id         String   @id @default(uuid())
  street     String
  city       String
  state      String
  zip        String?
  country    String   @default("Nigeria")
  isShipping Boolean  @default(false)
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Payment {
  id        String        @id @default(uuid())
  type      PaymentType
  status    PaymentStatus
  amount    Float
  discount  Float
  coupon    String?
  useCoupon Boolean       @default(false)
  user      User?         @relation(fields: [userId], references: [id])
  userId    String?
  order     Order?        @relation(fields: [orderId], references: [id])
  orderId   String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentType {
  DEBIT_CARD
  CASH_ON_DELIVERY
}

enum DeliveryStatus {
  NONE
  PENDING
  EN_ROUTE
  DELIVERED
  CANCELLED
}

enum DeliveryType {
  NONE
  HOME_DELIVERY
  PICKUP
}
